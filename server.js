import express from "express";
import fs from "fs";
import path from "path";
import { fileURLToPath } from "url";
import dotenv from "dotenv";
dotenv.config();

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// === –ö–æ–Ω—Ñ–∏–≥ –∏–∑ env
const PORT = process.env.PORT || 8080;
const TASK_DIR = process.env.TASK_DIR || "/mnt/data/tasks";         // —Ñ–∞–π–ª–æ–≤–∞—è –æ—á–µ—Ä–µ–¥—å
const TASK_KEY = process.env.TASK_KEY || "super_secret_task_key";   // –∫–ª—é—á –¥–ª—è claim/done/requeue
const DEFAULT_REPLY =
  process.env.DEFAULT_REPLY ||
  "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫–ª–∏–∫ üôå –°–µ–π—á–∞—Å –ø—Ä–∏—à–ª—é –¥–µ—Ç–∞–ª–∏ –∏ –∞–Ω–∫–µ—Ç—É.";
const ONLY_FIRST_SYSTEM =
  String(process.env.ONLY_FIRST_SYSTEM || "true").toLowerCase() === "true"; // –µ—Å–ª–∏ true ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ ¬´–ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è¬ª

fs.mkdirSync(TASK_DIR, { recursive: true });

const app = express();
app.use(express.json({ limit: "1mb" }));

// healthcheck
app.get("/", (_, res) => res.json({ ok: true, msg: "Avito webhook alive üöÄ" }));

// ========================= WEBHOOK =========================
//
// –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç –ê–≤–∏—Ç–æ: /webhook/:account
// –ö–ª–∞–¥—ë–º –∑–∞–¥–∞—á—É –≤ —Ñ–∞–π–ª–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ –ø–æ messageId)
// –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π JSON –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
//
app.post("/webhook/:account", (req, res) => {
  const account = req.params.account || "default";

  // –õ–û–ì –ü–û–õ–ù–û–ì–û –ü–ï–ô–õ–û–ê–î–ê
  console.log("=== RAW AVITO WEBHOOK ===");
  try {
    console.log(JSON.stringify(req.body, null, 2));
  } catch {
    console.log("[warn] cannot stringify req.body");
  }
  console.log("=========================");

  const body = req.body || {};
  const payload = body.payload || {};
  const v = payload.value || {};

  if (payload.type !== "message" || !v) {
    return res.json({ ok: true, skipped: "not a message event" });
  }

  const msgType = String(v.type || "").toLowerCase(); // "system" | "text" | ...
  const textIn = v.content?.text || "";
  const chatId = String(v.chat_id || "");
  const messageId = String(v.id || "");
  const authorId = Number(v.author_id || 0);

  if (!chatId || !messageId) {
    return res.status(400).json({ ok: false, error: "no chatId/messageId" });
  }

  // --- –õ–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∑–∞–¥–∞—á–∏ ---
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –¥–≤–∞ —Å–ª—É—á–∞—è:
  // 1) –ü–µ—Ä–≤–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–∏–∫–µ: "[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] –ö–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è ..."
  // 2) –õ—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞ (author_id > 0), –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º ONLY_FIRST_SYSTEM
  let shouldCreateTask = false;

  const isSystemCandidate =
    msgType === "system" &&
    typeof textIn === "string" &&
    textIn.toLowerCase().includes("–∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è");

  if (ONLY_FIRST_SYSTEM) {
    shouldCreateTask = isSystemCandidate;
  } else {
    const isHumanText = authorId > 0 && msgType !== "system";
    shouldCreateTask = isSystemCandidate || isHumanText;
  }

  if (!shouldCreateTask) {
    return res.json({ ok: true, skipped: "filter_no_task" });
  }

  const task = {
    account,
    source: "avito",
    receivedAt: new Date().toISOString(),

    // –ø—Ä–∏–≤—è–∑–∫–∏
    messageId,
    chatId,
    chatType: String(v.chat_type || ""),
    itemId: Number(v.item_id || 0),
    userId: Number(v.user_id || 0),
    createdTs: Number(v.created || 0),
    publishedAt: String(v.published_at || ""),

    // —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    textIn,
    replyText: DEFAULT_REPLY,
    chatUrl: null
  };

  // –ò–î–ï–ú–ü–û–¢–ï–ù–¢–ù–û–ï –°–û–ó–î–ê–ù–ò–ï: —Å–æ–∑–¥–∞—ë–º *.json, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const filePath = path.join(TASK_DIR, `${messageId}.json`);
  try {
    const fd = fs.openSync(filePath, "wx"); // —Å–æ–∑–¥–∞—Å—Ç –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –Ω–µ—Ç
    fs.writeFileSync(fd, JSON.stringify(task, null, 2), "utf8");
    fs.closeSync(fd);
  } catch (e) {
    if (e?.code === "EEXIST") return res.json({ ok: true, dedup: true });
    console.error("write task error:", e);
    return res.status(500).json({ ok: false, error: "write failed" });
  }

  return res.json({ ok: true });
});

// ========================= HTTP-–û–ß–ï–†–ï–î–¨ –î–õ–Ø ZENNO =========================
//
// GET /tasks/claim?account=hr-main&key=TASK_KEY
//   ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –∑–∞–¥–∞—á—É –∏ –õ–û–ö-—Ñ–∞–π–ª (rename *.json ‚Üí *.taking)
// POST /tasks/done?lock=<–∏–º—è_–ª–æ–∫_—Ñ–∞–π–ª–∞>&key=TASK_KEY
//   ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ—Ç –õ–û–ö-—Ñ–∞–π–ª
// POST /tasks/requeue?lock=<–∏–º—è_–ª–æ–∫_—Ñ–∞–π–ª–∞>&key=TASK_KEY
//   ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å (rename *.taking ‚Üí *.json)
//
app.get("/tasks/claim", (req, res) => {
  if ((req.query.key || "") !== TASK_KEY)
    return res.status(403).json({ ok: false, error: "forbidden" });

  const wantAccount = (req.query.account || "").trim(); // –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å

  // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª *.json
  let files;
  try {
    files = fs.readdirSync(TASK_DIR).filter((f) => f.endsWith(".json"));
  } catch (e) {
    console.error("claim list error:", e);
    return res.status(500).json({ ok: false, error: "list failed" });
  }

  for (const f of files) {
    const p = path.join(TASK_DIR, f);
    try {
      const raw = JSON.parse(fs.readFileSync(p, "utf8"));
      if (wantAccount && raw.account !== wantAccount) continue;

      // –∞—Ç–æ–º–∞—Ä–Ω–æ "–∑–∞–ª–æ—á–∏–º": –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º –≤ .taking
      const lockPath = p + ".taking";
      fs.renameSync(p, lockPath);

      // –æ—Ç–¥–∞—ë–º –∑–∞–¥–∞—á—É –∏ –∏–º—è lock-—Ñ–∞–π–ª–∞
      return res.json({
        ok: true,
        task: raw,
        lock: path.basename(lockPath)
      });
    } catch (e) {
      console.error("claim parse/lock error:", e);
      // –±–∏—Ç—ã–π —Ñ–∞–π–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∫–ª–∏–Ω–∏–ª–æ –æ—á–µ—Ä–µ–¥—å
      try { fs.unlinkSync(p); } catch {}
      continue;
    }
  }

  return res.json({ ok: true, task: null }); // –∑–∞–¥–∞—á –Ω–µ—Ç
});

app.post("/tasks/done", (req, res) => {
  if ((req.query.key || "") !== TASK_KEY)
    return res.status(403).json({ ok: false, error: "forbidden" });

  const lock = (req.query.lock || "").trim();
  if (!lock) return res.status(400).json({ ok: false, error: "no lock" });

  const lockPath = path.join(TASK_DIR, lock);
  try {
    if (fs.existsSync(lockPath)) fs.unlinkSync(lockPath);
    return res.json({ ok: true });
  } catch (e) {
    console.error("done delete error:", e);
    return res.status(500).json({ ok: false, error: "delete failed" });
  }
});

app.post("/tasks/requeue", (req, res) => {
  if ((req.query.key || "") !== TASK_KEY)
    return res.status(403).json({ ok: false, error: "forbidden" });

  const lock = (req.query.lock || "").trim();
  if (!lock) return res.status(400).json({ ok: false, error: "no lock" });

  const lockPath = path.join(TASK_DIR, lock);
  try {
    if (!fs.existsSync(lockPath))
      return res.status(404).json({ ok: false, error: "not found" });
    const back = lockPath.replace(/\.taking$/, ".json");
    fs.renameSync(lockPath, back);
    return res.json({ ok: true });
  } catch (e) {
    console.error("requeue error:", e);
    return res.status(500).json({ ok: false, error: "requeue failed" });
  }
});

// ========================= DEBUG (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) =========================
//
// –°–ø–∏—Å–æ–∫/—á—Ç–µ–Ω–∏–µ/–æ—á–∏—Å—Ç–∫–∞ ‚Äî —É–¥–æ–±–Ω–æ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å.
//
app.get("/tasks/list", (req, res) => {
  try {
    const files = fs
      .readdirSync(TASK_DIR)
      .filter((f) => f.endsWith(".json") || f.endsWith(".taking"))
      .map((f) => {
        const p = path.join(TASK_DIR, f);
        const st = fs.statSync(p);
        return {
          file: f,
          size: st.size,
          mtime: st.mtime.toISOString()
        };
      })
      .sort((a, b) => b.mtime.localeCompare(a.mtime));
    res.json({ ok: true, dir: TASK_DIR, count: files.length, files });
  } catch (e) {
    console.error("list error:", e);
    res.status(500).json({ ok: false, error: "list failed" });
  }
});

app.get("/tasks/read/:id", (req, res) => {
  const id = (req.params.id || "").trim();
  if (!id) return res.status(400).json({ ok: false, error: "no id" });

  // –ø–æ–¥–¥–µ—Ä–∂–∏–º –∏ .json, –∏ .taking –¥–ª—è —á—Ç–µ–Ω–∏—è
  const pJson = path.join(TASK_DIR, `${id}.json`);
  const pTaking = path.join(TASK_DIR, `${id}.taking`);
  const filePath = fs.existsSync(pJson) ? pJson : pTaking;

  try {
    if (!filePath || !fs.existsSync(filePath))
      return res.status(404).json({ ok: false, error: "not found" });
    const data = fs.readFileSync(filePath, "utf8");
    res.setHeader("Content-Type", "application/json; charset=utf-8");
    res.send(data);
  } catch (e) {
    console.error("read error:", e);
    res.status(500).json({ ok: false, error: "read failed" });
  }
});

app.post("/tasks/purge", (req, res) => {
  try {
    const files = fs
      .readdirSync(TASK_DIR)
      .filter((f) => f.endsWith(".json") || f.endsWith(".taking"));
    let removed = 0;
    for (const f of files) {
      try {
        fs.unlinkSync(path.join(TASK_DIR, f));
        removed++;
      } catch {}
    }
    res.json({ ok: true, removed });
  } catch (e) {
    console.error("purge error:", e);
    res.status(500).json({ ok: false, error: "purge failed" });
  }
});

app.listen(PORT, () => console.log(`Webhook listening on :${PORT}`));
